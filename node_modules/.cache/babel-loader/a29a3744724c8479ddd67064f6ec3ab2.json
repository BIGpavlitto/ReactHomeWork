{"ast":null,"code":"import _slicedToArray from\"C:/Users/titi_/WebstormProjects/TMS_FE_16/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _taggedTemplateLiteral from\"C:/Users/titi_/WebstormProjects/TMS_FE_16/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js\";var _templateObject;import React,{memo,useState}from\"react\";import{ThemeProvider,createGlobalStyle//StyleSheetManager\n}from\"styled-components\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export var ThemeContext=/*#__PURE__*/React.createContext('');export var GlobalStyles=createGlobalStyle(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  body {\\n  margin: 0;\\n  background-color: \",\";\\n  }\\n\"])),function(props){return props.theme.basicBackGroundColor;});export var globalDarkStyle={appBaseFontColor:\"white\",navbarBackgroundColor:\"#212323\",basicBackGroundColor:\"#313534\",infoCardBackgroundColor:\"#3f4342\",accentBackgroundColor:\"#4a4f4e\",accentTextColor:\"#f5c415\"};export var globalLightStyle={appBaseFontColor:\"black\",navbarBackgroundColor:\"#7C7B76\",basicBackGroundColor:\"#F2F0E6\",infoCardBackgroundColor:\"#C2C0B8\",accentBackgroundColor:\"#4a4f4e\",accentTextColor:\"#93c54b\"};var GlobalThemeProvider=function GlobalThemeProvider(props){var _useState=useState(false),_useState2=_slicedToArray(_useState,2),isThemeGreen=_useState2[0],setIsThemeGreen=_useState2[1];var toggleTheme=function toggleTheme(){setIsThemeGreen(!isThemeGreen);};return/*#__PURE__*/_jsx(ThemeProvider,{theme:isThemeGreen?globalLightStyle:globalDarkStyle,children:/*#__PURE__*/_jsxs(ThemeContext.Provider,{value:toggleTheme,children:[/*#__PURE__*/_jsx(GlobalStyles,{}),props.children]})});};export default/*#__PURE__*/memo(GlobalThemeProvider);","map":{"version":3,"sources":["C:/Users/titi_/WebstormProjects/TMS_FE_16/src/HOC/GlobalThemeProvider.jsx"],"names":["React","memo","useState","ThemeProvider","createGlobalStyle","ThemeContext","createContext","GlobalStyles","props","theme","basicBackGroundColor","globalDarkStyle","appBaseFontColor","navbarBackgroundColor","infoCardBackgroundColor","accentBackgroundColor","accentTextColor","globalLightStyle","GlobalThemeProvider","isThemeGreen","setIsThemeGreen","toggleTheme","children"],"mappings":"kSAAA,MAAOA,CAAAA,KAAP,EAAeC,IAAf,CAAqBC,QAArB,KAAoC,OAApC,CAEA,OACIC,aADJ,CAEIC,iBACA;AAHJ,KAIO,mBAJP,C,wFAMA,MAAO,IAAMC,CAAAA,YAAY,cAAGL,KAAK,CAACM,aAAN,CAAoB,EAApB,CAArB,CAEP,MAAO,IAAMC,CAAAA,YAAY,CAAGH,iBAAH,0HAGH,SAAAI,KAAK,QAAIA,CAAAA,KAAK,CAACC,KAAN,CAAYC,oBAAhB,EAHF,CAAlB,CAOP,MAAO,IAAMC,CAAAA,eAAe,CAAG,CAC3BC,gBAAgB,CAAE,OADS,CAE3BC,qBAAqB,CAAE,SAFI,CAG3BH,oBAAoB,CAAE,SAHK,CAI3BI,uBAAuB,CAAE,SAJE,CAK3BC,qBAAqB,CAAE,SALI,CAM3BC,eAAe,CAAE,SANU,CAAxB,CASP,MAAO,IAAMC,CAAAA,gBAAgB,CAAG,CAC5BL,gBAAgB,CAAE,OADU,CAE5BC,qBAAqB,CAAE,SAFK,CAG5BH,oBAAoB,CAAE,SAHM,CAI5BI,uBAAuB,CAAE,SAJG,CAK5BC,qBAAqB,CAAE,SALK,CAM5BC,eAAe,CAAE,SANW,CAAzB,CAUP,GAAME,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,CAACV,KAAD,CAAW,CACnC,cAAwCN,QAAQ,CAAC,KAAD,CAAhD,wCAAOiB,YAAP,eAAqBC,eAArB,eAEA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,EAAK,CACrBD,eAAe,CAAC,CAACD,YAAF,CAAf,CACH,CAFD,CAIA,mBACI,KAAC,aAAD,EAAe,KAAK,CAAEA,YAAY,CAAEF,gBAAF,CAAqBN,eAAvD,uBACI,MAAC,YAAD,CAAc,QAAd,EAAuB,KAAK,CAAEU,WAA9B,wBACI,KAAC,YAAD,IADJ,CAESb,KAAK,CAACc,QAFf,GADJ,EADJ,CAQH,CAfD,CAiBA,2BAAerB,IAAI,CAACiB,mBAAD,CAAnB","sourcesContent":["import React, {memo, useState} from \"react\";\r\n\r\nimport{\r\n    ThemeProvider,\r\n    createGlobalStyle,\r\n    //StyleSheetManager\r\n} from \"styled-components\";\r\n\r\nexport const ThemeContext = React.createContext('');\r\n\r\nexport const GlobalStyles = createGlobalStyle`\r\n  body {\r\n  margin: 0;\r\n  background-color: ${props => props.theme.basicBackGroundColor};\r\n  }\r\n`;\r\n\r\nexport const globalDarkStyle = {\r\n    appBaseFontColor: \"white\",\r\n    navbarBackgroundColor: \"#212323\",\r\n    basicBackGroundColor: \"#313534\",\r\n    infoCardBackgroundColor: \"#3f4342\",\r\n    accentBackgroundColor: \"#4a4f4e\",\r\n    accentTextColor: \"#f5c415\",\r\n};\r\n\r\nexport const globalLightStyle = {\r\n    appBaseFontColor: \"black\",\r\n    navbarBackgroundColor: \"#7C7B76\",\r\n    basicBackGroundColor: \"#F2F0E6\",\r\n    infoCardBackgroundColor: \"#C2C0B8\",\r\n    accentBackgroundColor: \"#4a4f4e\",\r\n    accentTextColor: \"#93c54b\",\r\n};\r\n\r\n\r\nconst GlobalThemeProvider = (props) => {\r\n    const [isThemeGreen, setIsThemeGreen] = useState(false);\r\n\r\n    const toggleTheme = () =>{\r\n        setIsThemeGreen(!isThemeGreen);\r\n    }\r\n\r\n    return(\r\n        <ThemeProvider theme={isThemeGreen? globalLightStyle : globalDarkStyle}>\r\n            <ThemeContext.Provider value={toggleTheme}>\r\n                <GlobalStyles/>\r\n                    {props.children}\r\n            </ThemeContext.Provider>\r\n        </ThemeProvider>\r\n    )\r\n}\r\n\r\nexport default memo(GlobalThemeProvider);"]},"metadata":{},"sourceType":"module"}